/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$notify-email-use-checked-name: 'notify-email-use-checked';
$notify-email-use-checked-x: 0px;
$notify-email-use-checked-y: 39px;
$notify-email-use-checked-offset-x: 0px;
$notify-email-use-checked-offset-y: -39px;
$notify-email-use-checked-width: 39px;
$notify-email-use-checked-height: 30px;
$notify-email-use-checked-total-width: 109px;
$notify-email-use-checked-total-height: 69px;
$notify-email-use-checked-image: '../img/notify.png';
$notify-email-use-checked: (0px, 39px, 0px, -39px, 39px, 30px, 109px, 69px, '../img/notify.png', 'notify-email-use-checked', );
$notify-email-use-name: 'notify-email-use';
$notify-email-use-x: 70px;
$notify-email-use-y: 0px;
$notify-email-use-offset-x: -70px;
$notify-email-use-offset-y: 0px;
$notify-email-use-width: 39px;
$notify-email-use-height: 30px;
$notify-email-use-total-width: 109px;
$notify-email-use-total-height: 69px;
$notify-email-use-image: '../img/notify.png';
$notify-email-use: (70px, 0px, -70px, 0px, 39px, 30px, 109px, 69px, '../img/notify.png', 'notify-email-use', );
$notify-phone-use-checked-name: 'notify-phone-use-checked';
$notify-phone-use-checked-x: 0px;
$notify-phone-use-checked-y: 0px;
$notify-phone-use-checked-offset-x: 0px;
$notify-phone-use-checked-offset-y: 0px;
$notify-phone-use-checked-width: 35px;
$notify-phone-use-checked-height: 39px;
$notify-phone-use-checked-total-width: 109px;
$notify-phone-use-checked-total-height: 69px;
$notify-phone-use-checked-image: '../img/notify.png';
$notify-phone-use-checked: (0px, 0px, 0px, 0px, 35px, 39px, 109px, 69px, '../img/notify.png', 'notify-phone-use-checked', );
$notify-phone-use-name: 'notify-phone-use';
$notify-phone-use-x: 35px;
$notify-phone-use-y: 0px;
$notify-phone-use-offset-x: -35px;
$notify-phone-use-offset-y: 0px;
$notify-phone-use-width: 35px;
$notify-phone-use-height: 39px;
$notify-phone-use-total-width: 109px;
$notify-phone-use-total-height: 69px;
$notify-phone-use-image: '../img/notify.png';
$notify-phone-use: (35px, 0px, -35px, 0px, 35px, 39px, 109px, 69px, '../img/notify.png', 'notify-phone-use', );
$notify-spritesheet-width: 109px;
$notify-spritesheet-height: 69px;
$notify-spritesheet-image: '../img/notify.png';
$notify-spritesheet-sprites: ($notify-email-use-checked, $notify-email-use, $notify-phone-use-checked, $notify-phone-use, );
$notify-spritesheet: (109px, 69px, '../img/notify.png', $notify-spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
